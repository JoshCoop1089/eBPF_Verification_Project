0000000000000000 sock4_xlate_rcv:
       0:       bf 16 00 00 00 00 00 00 r6 = r1
       1:       b7 01 00 00 00 00 00 00 r1 = 0
       2:       61 62 24 00 00 00 00 00 r2 = *(u32 *)(r6 + 36)
       3:       56 02 04 00 06 00 00 00 if w2 != 6 goto +4 <LBB2_2>
       4:       85 00 00 00 07 00 00 00 call 7
       5:       bc 01 00 00 00 00 00 00 w1 = w0
       6:       67 01 00 00 20 00 00 00 r1 <<= 32
       7:       77 01 00 00 20 00 00 00 r1 >>= 32


> Only accessed by line 3 or line 7 (no loops)
 - Access from line 3 means r1 = 0, r2 = 6
 - Access from line 7 means r1 = random 32-bit number, r2 != 6

0000000000000040 LBB2_2:
       8:       7b 1a d8 ff 00 00 00 00 *(u64 *)(r10 - 40) = r1
       9:       61 61 04 00 00 00 00 00 r1 = *(u32 *)(r6 + 4)
      10:       63 1a e0 ff 00 00 00 00 *(u32 *)(r10 - 32) = r1
      11:       61 61 18 00 00 00 00 00 r1 = *(u32 *)(r6 + 24)
      12:       63 1a f0 ff 00 00 00 00 *(u32 *)(r10 - 16) = r1
      13:       b4 08 00 00 00 00 00 00 w8 = 0
      14:       6b 8a e6 ff 00 00 00 00 *(u16 *)(r10 - 26) = r8
      15:       61 a1 f0 ff 00 00 00 00 r1 = *(u32 *)(r10 - 16) [see line 12?]
      16:       6b 1a e4 ff 00 00 00 00 *(u16 *)(r10 - 28) = r1
      17:       bf a2 00 00 00 00 00 00 r2 = r10
      18:       07 02 00 00 d8 ff ff ff r2 += -40
      19:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      21:       85 00 00 00 01 00 00 00 call 1
      22:       bf 07 00 00 00 00 00 00 r7 = r0
      23:       15 07 41 00 00 00 00 00 if r7 == 0 goto +65 <LBB2_14> //end (r7 != 0)
      24:       61 71 00 00 00 00 00 00 r1 = *(u32 *)(r7 + 0) //(r1 != 0)
      25:       63 1a c8 ff 00 00 00 00 *(u32 *)(r10 - 56) = r1
      26:       69 71 04 00 00 00 00 00 r1 = *(u16 *)(r7 + 4)
      27:       6b 8a d0 ff 00 00 00 00 *(u16 *)(r10 - 48) = r8
      28:       6b 8a ce ff 00 00 00 00 *(u16 *)(r10 - 50) = r8
      29:       6b 8a d2 ff 00 00 00 00 *(u16 *)(r10 - 46) = r8
      30:       6b 1a cc ff 00 00 00 00 *(u16 *)(r10 - 52) = r1
      31:       16 01 0a 00 00 00 00 00 if w1 == 0 goto +10 <LBB2_7> //if we skip here, then r10-56 = r10-52 = r1 = 0
      32:       bf a2 00 00 00 00 00 00 r2 = r10
      33:       07 02 00 00 c8 ff ff ff r2 += -56 //store what was previously in r10-56
      34:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      36:       85 00 00 00 01 00 00 00 call 1
      37:       15 00 02 00 00 00 00 00 if r0 == 0 goto +2 <LBB2_6>
      38:       69 01 04 00 00 00 00 00 r1 = *(u16 *)(r0 + 4)
      39:       56 01 0a 00 00 00 00 00 if w1 != 0 goto +10 <LBB2_9>

Data stored in stack (r10):
 r10 - 16 = u32 int from r6 + 24 (12)
 r10 - 26 = 0 (14)
 r10 - 28 = u32 int from r6 + 24 (16)
 r10 - 32 = u32 int from r6 + 4 (10)
 r10 - 40 = 0 or random u32 int (8)
 r10 - 46 = 0 (29)
 r10 - 48 = 0 (27)
 r10 - 50 = 0 (28)
 r10 - 52 = nonzero u16 int (30, bottom of r10 - 56)
 r10 - 56 = nonzero u32 int (25)



> arrive here if return from line 36 was a multiple of 16.
0000000000000140 LBB2_6:
      40:       b4 01 00 00 00 00 00 00 w1 = 0
      41:       6b 1a cc ff 00 00 00 00 *(u16 *)(r10 - 52) = r1

> sets r1 = 0
r10 - 52 = 0

0000000000000150 LBB2_7:
      42:       bf a2 00 00 00 00 00 00 r2 = r10
      43:       07 02 00 00 c8 ff ff ff r2 += -56
      44:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      46:       85 00 00 00 01 00 00 00 call 1
      47:       15 00 05 00 00 00 00 00 if r0 == 0 goto +5 <LBB2_10>
      48:       69 01 04 00 00 00 00 00 r1 = *(u16 *)(r0 + 4)
      49:       16 01 03 00 00 00 00 00 if w1 == 0 goto +3 <LBB2_10>

0000000000000190 LBB2_9:
      50:       69 71 06 00 00 00 00 00 r1 = *(u16 *)(r7 + 6)
      51:       69 02 06 00 00 00 00 00 r2 = *(u16 *)(r0 + 6)
      52:       1e 12 14 00 00 00 00 00 if w2 == w1 goto +20 <LBB2_13>

00000000000001a8 LBB2_10:
      53:       bf a2 00 00 00 00 00 00 r2 = r10
      54:       07 02 00 00 d8 ff ff ff r2 += -40
      55:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      57:       85 00 00 00 03 00 00 00 call 3
      58:       b7 06 00 00 00 00 00 00 r6 = 0
      59:       7b 6a f8 ff 00 00 00 00 *(u64 *)(r10 - 8) = r6
      60:       7b 6a f0 ff 00 00 00 00 *(u64 *)(r10 - 16) = r6
      61:       b7 01 00 00 08 01 00 00 r1 = 264
      62:       7b 1a e8 ff 00 00 00 00 *(u64 *)(r10 - 24) = r1
      63:       bf a2 00 00 00 00 00 00 r2 = r10
      64:       07 02 00 00 e8 ff ff ff r2 += -24
      65:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      67:       85 00 00 00 01 00 00 00 call 1
      68:       15 00 09 00 00 00 00 00 if r0 == 0 goto +9 <LBB2_12>
      69:       79 01 00 00 00 00 00 00 r1 = *(u64 *)(r0 + 0)
      70:       07 01 00 00 01 00 00 00 r1 += 1
      71:       7b 10 00 00 00 00 00 00 *(u64 *)(r0 + 0) = r1
      72:       05 00 10 00 00 00 00 00 goto +16 <LBB2_14>

0000000000000248 LBB2_13:
      73:       61 71 00 00 00 00 00 00 r1 = *(u32 *)(r7 + 0)
      74:       63 16 04 00 00 00 00 00 *(u32 *)(r6 + 4) = r1
      75:       69 71 04 00 00 00 00 00 r1 = *(u16 *)(r7 + 4)
      76:       63 16 18 00 00 00 00 00 *(u32 *)(r6 + 24) = r1
      77:       05 00 0b 00 00 00 00 00 goto +11 <LBB2_14>

0000000000000270 LBB2_12:
      78:       7b 6a f8 ff 00 00 00 00 *(u64 *)(r10 - 8) = r6
      79:       b7 01 00 00 01 00 00 00 r1 = 1
      80:       7b 1a f0 ff 00 00 00 00 *(u64 *)(r10 - 16) = r1
      81:       bf a2 00 00 00 00 00 00 r2 = r10
      82:       07 02 00 00 e8 ff ff ff r2 += -24
      83:       bf a3 00 00 00 00 00 00 r3 = r10
      84:       07 03 00 00 f0 ff ff ff r3 += -16
      85:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      87:       b4 04 00 00 00 00 00 00 w4 = 0
      88:       85 00 00 00 02 00 00 00 call 2

00000000000002c8 LBB2_14:
      89:       b4 00 00 00 01 00 00 00 w0 = 1
      90:       95 00 00 00 00 00 00 00 exit



[r1_1] = &int

[r6_1] = [r1_1]

[r1_2] = [0] = int

[r6_1+36] = [r6_1]
[*(r6_1+36)] = *[r6_1+36]
[r2_1] = [*(r6_1+36)]

[w2_1] = [r2_1]
[w2_1] = [6] = int
       
[r0_1] = [call 7]
[w0_1] = [r0_1]
[call 7] = int

[w1_1] = [w0_1]
[r1_3] = [w1_1]

[r1_4] = [r1_3]
[r1_5] = [r1_4]