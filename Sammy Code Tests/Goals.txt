6/11:
Given some eBPF programs
 - Generate typing constraints
 - Come up with a unification algorithm for the types of each of the registers
   - All variables are pointers or integers

 https://www.coursera.org/learn/programming-languages, Week 5

6/15:
Range analysis:
 - Read paper on range analysis of Mozilla Firefox

 https://cseweb.ucsd.edu/~dstefan/pubs/brown:2020:vera.pdf

6/18:
 - Make a small subset of BPF instructions to analyze (5-10)
 - Model the interpreter's function with first order logic
 - Take C code used for the instruction
 - Model the verifier with first order logic

 https://github.com/torvalds/linux/blob/master/kernel/bpf/verifier.c (~/verifier.c#L10876 and #L38)
 https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c
 https://github.com/iovisor/bpf-docs/blob/master/eBPF.md
 https://github.com/torvalds/linux/blob/master/kernel/bpf/core.c (#L1359)

 from last week: https://github.com/cilium/cilium/blob/master/bpf/bpf_sock.c

6/22:
 - Focus on just maybe BPF_ADD and BPF_MOV.
 - If you can translate to Z3, that's great
 - Want to check if there are any concrete values which are valid inputs but don't produce a valid output

 Consider installing better tools (cscope, ...)

6/25:
 - Translate code into Z3
 - For helper functions, assume hard things are true
 - For now, work only on range analysis. Ignore pointer out of bounds checks.

6/29:
 - Theory of Arrays for Z3
 - Calculus of computation by Aaron Bradley, chapter on Program Verification

7/2:
 - Re-read Chapter 5 and 6, mini-lecture during 6/29 meeting should assist in understanding
 - Generate a precondition for check_alu_op (for BPF_MOV)

7/6:
 - Consider/reconstruct the safety postcondition for check_alu_op

7/13:
 - Check verifier safety postcondition FOL against oracle safety postcondition FOL

7/16:

7/20:
 - Trace BPF_ADD through the verifier and present the path
 - Construct informal "why"/what each method does
 	- Consider how to model this

7/27:
 - Want to model the abstract algorithm the verifier is attempting to implement
 - Brainstorm how to model a tnum struct (https://elixir.bootlin.com/linux/latest/source/include/linux/tnum.h#L96)
 - How to model ranges

7/30:
 - Model all tnum operations from tnum.c 
 - Use Z3 bitvectors (?)

8/3:
 - Encode all operations for real this time
 - Mimic c code
 - Attempt to check with SAT solver - given tnum_1, tnum_2, tnum_3, and operation o(), such that o(tnum_1, tnum_2) = tnum_3 does there exist:
  > a in tnum_1
  > b in tnum_2
  > c = o(a,b)

  such that c is not in tnum_3

8/13:
 - Not much time left, start working on final wrap up deliverable
 - Unravel multiplication
 - Start looking at doing verification for BPF_ADD, say
