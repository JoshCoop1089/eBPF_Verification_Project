6/29:
=====
Automatic Program Verification

Each function has a precondition and postcondition.

Say we have a function f which has a precondition P and postcondition (phi). Let's say f can be split into 3 parts: a block of code A, a loop B, and a block of code C.

C's postcondition must be (phi). Then you can compute its precondition backwards using predicate transformal. For example, say (phi): y > 0, and C: y = x + 5. Then, the precondition must be x > -5. This is the weakest precondition of C, or wp(C).

Each loop can have a loop-invariant 'i'. This is a statement or set of statements that is true at the beginning of the loop, at the end of the loop, and after every individual iteration of the loop. In other words, if you want it as a postcondition you can use it as a precondition. You can use an SMT solver to check if i -> wp(C) for all inputs. You can also restrict i and create a wp(B).

In this way you can back-propagate postconditions into preconditions and come up with P.

7/6:
====
Goal for the project:
  - find input such that verifier_accept_conditions && ~ oracle_safety_condition
  - verifier_accept_conditions -> postcondition that we expect to be true once a given instruction is processed by the verifier
  - oracle_safety_condition encodes an ideal interpreter's actions over the program's inputs or abstractions over that: e.g., all memory addresses are in a certain range, a given branch condition is never influenced by the input, ...

  - above steps occur _given_ a program
  - goal: enumerate over all programs with a fixed number of instructions and check the FOL above

https://ricklarabee.blogspot.com/2018/07/ebpf-and-analysis-of-get-rekt-linux.html

https://www.dndbeyond.com/profile/1pwny/characters/25182396

7/13:
=====
(state, instruction) -> state

Josh: concrete evaluation -- no need to maintain bounds. Sammy: symbolic evaluation -- maintain bounds. The final FOL will check whether the symbolic and concrete evaluation match each other. If they dont, either our formalization is wrong, or the verifier's symbolic eval is buggy.

concrete eval: (state: reg, latest version, value)

symbolic eval: (state: reg, bounds on the register, type, ...)

state, instruction -> state

for all inputs x,

state [program, concrete(x)] should be within the symbolic state [program, symbolic(x)]

7/20:
=====
BPF_X has something to do with whether the source register is a variable (BPF_X?) or a constant (BPF_K?)

8/10:
=====
https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.dominance.dominance_frontiers.html
https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.dominance.immediate_dominators.html

8/20:
=====
Report structure
* introduction 
* problem
* context / background
* precise problem statement
* approach
-- examples
	> explain yourself here
* results
	positives: proofs, interpret, future work

	pending issues
* discussion
	beyond the technical details
	take a step back, what did you learn
	personal reflection
should be about 4-6 pages
* source code